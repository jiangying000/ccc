[project]
name = "ccc"
version = "3.9.0"
description = "Claude Context Resume Tool - Smart context extraction for Claude Code sessions"
authors = [
    {name = "jiangying000", email = ""},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
dependencies = [
    "tiktoken>=0.5.0",
]
keywords = ["claude", "ai", "context", "token", "optimization"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Text Processing",
    "Environment :: Console",
    "Operating System :: OS Independent",
]

[project.urls]
Homepage = "https://github.com/jiangying000/ccc"
Repository = "https://github.com/jiangying000/ccc"
Issues = "https://github.com/jiangying000/ccc/issues"

[project.scripts]
ccc = "ccc.cli:ccc"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]

[tool.uv]
managed = true
dev-dependencies = []

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["ccc"]

[tool.ruff]
target-version = "py38"
line-length = 120
select = ["E", "F", "W", "I", "N", "UP", "B"]
ignore = ["E501", "B008"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["ccc"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]